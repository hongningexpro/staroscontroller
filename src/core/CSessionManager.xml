<?xml version="1.0" encoding="UTF-8"?>
<starosxml xmlns="http://www.staros.xyz/starcore/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" scope="application">
	<class name="CSession">
		<private>
			<variable name="m_cseeionid" type="string" />
			<variable name="m_username" type="string" />
			<variable name="m_current" type="long" />
		</private>
		<public>
			<!-- hu 20170904 create Session and add data-->
			<function name="CSession">
				<parameters>
					<parameter name="sessionid" type="string"/>
					<parameter name="username" type="string"/>
				</parameters>
				<set name="thisclass.m_cseeionid" value="context.sessionid.toString()"/>
				<set name="thisclass.m_username" value="context.username.toString()"/>
				<script><![CDATA[
					function getNowFormatDate() {
						var date = new Date();
						var seperator1 = "-";
						var seperator2 = ":";
						var month = date.getMonth() + 1;
						var strDate = date.getDate();
						if (month >= 1 && month <= 9) {
							month = "0" + month;
						}
						if (strDate >= 0 && strDate <= 9) {
							strDate = "0" + strDate;
						}
						var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate
								+ " " + date.getHours() + seperator2 + date.getMinutes()
								+ seperator2 + date.getSeconds();
						return currentdate;
					}
					function getCurrentTimerInMs() {
						var timestamp=new Date().getTime();
						return timestamp;
					}
					
					context.m_current.setValue(getCurrentTimerInMs());
				]]></script>
			</function>
			<!-- hu 20170904 resettime to now time-->
			<function name="ResetTime">
				<script><![CDATA[
					function getCurrentTimerInMs() {
						var timestamp=new Date().getTime();
						return timestamp;
					}
					
					context.m_current.setValue(getCurrentTimerInMs());
				]]></script>
			</function>
			<function name="Gettime">
				<parameters>
					<parameter name="time" type="long"/>
				</parameters>
				<set name="time" value="thisclass.m_current.toLong()"/>
			</function>
			
			<function name="GetUsername">
				<parameters>
					<parameter name="username" type="string"/>
				</parameters>
				<set name="username" value="thisclass.m_username.toString()"/>
			</function>
			
			
			
		</public>
	</class>
	<class name="CSessionManager">
		<private>
			<container name="SessionContainer" type="hashmap" keytype="string" valuetype="class"/>
		</private>
		<public>
			<function name="CreateSession">
					<parameters>
						<parameter name="sessionid" type="string"/>
						<parameter name="username" type="string"/>
					</parameters>
					<variable name="session" type="class"/>				
					<if cond="thisclass.SessionContainer.hasValue(context.sessionid.toString())==false">
							<then>
								<new name="session" class="CSession">
									<parameters>
										<parameter name="sessionid" type="string" in="context.sessionid.toString()"/>
										<parameter name="username" type="string" in="context.username.toString()"/>
									</parameters>
								</new>
								<insert name="SessionContainer" key="context.sessionid.toString()" value="context.session"/>
							</then>
							<else>
								<exit/>
							</else>
					</if>
			</function>
		
			<function name="RemoveSession">
					<parameters>
						<parameter name="sessionid" type="string"/>
					</parameters>
					<remove name="SessionContainer" key="context.sessionid.toString()"/>
			</function>
			
			<function name="FindSession">				
					<parameters>
						<parameter name="sessionid" type="string"/>	
						<parameter name="sessionobj" type="class"/>	
					</parameters>
					<if cond="thisclass.SessionContainer.hasValue(context.sessionid.toString())==true">
						<then>
							<lookup name="SessionContainer"  key="context.sessionid.toString()" output="context.sessionobj"/>
						</then>
						<else>
							<exit/>
						</else>
					</if>
			</function>	
			<!-- hu 20170904 when timeout remove session-->
			<function name="Timeout">
				<variable name="current" type="long" />
				<variable name="oncurrent" type="long" />
				<variable name="sessionid" type="string" />
				<container name="removelist" type="list" valuetype="string"/>
				<variable name="sessionobj" type="class" />
				<container name="oneSessionContainer" type="pair" keytype="string" valuetype="class"/>
					<script><![CDATA[
							function getCurrentTimerInMs() {
								var timestamp=new Date().getTime();
								return timestamp;
							}
							
							context.current.setValue(getCurrentTimerInMs());
					]]></script>
				<log><![CDATA[Timeout SessionContainer!!!!!= '<%=context.SessionContainer.size()%>']]></log>
					<for var="oneSessionContainer" in="context.SessionContainer">
						<set name="sessionobj" value="context.oneSessionContainer.second()"/>
						<set name="sessionid" value="context.oneSessionContainer.first()"/>
						<function name="Gettime" class="context.sessionobj">
							<parameters>
								<parameter name="time" type="long" out="context.oncurrent"/>	
							</parameters>
						</function>
						<log><![CDATA[current= '<%=context.current.toLong()%>']]></log>
						<log><![CDATA[oncurrent= '<%=context.oncurrent.toLong()%>']]></log>
						<if cond="context.current.toLong()-context.oncurrent.toLong()>=300000">
							<then>
								<insert name="removelist" value="context.sessionid.toString()"/>
								<log>Timeout remove</log>
							</then>
						</if>
					</for>
					<log><![CDATA[removelist size!!!!!= '<%=context.removelist.size()%>']]></log>
					<for var="sessionid" in="context.removelist">
						<remove name="SessionContainer" key="context.sessionid.toString()"/>
					</for>
			</function>
		

				
				
		</public>
	</class>
</starosxml>