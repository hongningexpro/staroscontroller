<?xml version="1.0" encoding="UTF-8"?>
<starosxml xmlns="http://www.staros.xyz/starcore/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" scope="application">
	<variable name="metertestid" type="string"/>
	<class name="CBand">
		<private>
			<variable name="m_type" type="string"/>
			<variable name="m_packets" type="string"/>
			<variable name="m_bytes" type="string"/>
		<variable name="m_bandjson" type="string"/>
		</private>
		<public>
			<function name="CBand">
				<parameters>
					<parameter name="type" type="string"/>
					<parameter name="bandjson" type="string"/>
				</parameters>
				<set name="thisclass.m_type" value="context.type.toString()"/>
				<set name="thisclass.m_bandjson" value="context.bandjson.toString()"/>
				<set name="thisclass.m_packets" value="'0'"/>
				<set name="thisclass.m_bytes" value="'0'"/>
			</function>
			<function name="UpdateBand">
				<parameters>
					<parameter name="packets" type="string"/>
					<parameter name="bytes" type="string"/>
				</parameters>
				<set name="thisclass.m_packets" value="context.packets.toString()"/>
				<set name="thisclass.m_bytes" value="context.bytes.toString()"/>
			</function>
		<function name="BandFormatter">
				<parameters>
					<parameter name="bandformatter" type="string"/>
				</parameters>
				<script><![CDATA[
					var totalstring="Bytes: "+thisclass.m_bytes.toString()+" Packets: "+thisclass.m_packets.toString()+" Type: "+thisclass.m_type.toString()+"<br>";
					context.bandformatter.setValue(totalstring);
				]]></script>
			</function>
		</public>
	</class>
	<class name="CMeter">
				<private>
			<variable name="m_id" type="string"/>
			<variable name="m_appid" type="string"/>
			<variable name="m_state" type="string"/>
			<variable name="m_packets" type="string"/>
			<variable name="m_bytes" type="string"/>
			<variable name="m_bands" type="string"/>
			<variable name="m_flow_count" type="string"/>
			<variable name="m_duration_sec" type="string"/>
			<variable name="m_duration_nsec" type="string"/>
			<variable name="m_meterjson" type="string"/>
			<container name="BandContainer" type="hashmap" keytype="string" valuetype="class"/>
				</private>
				<public>
			<function name="CMeter">
								<parameters>
					<parameter name="appid" type="string"/>
					<parameter name="strjson" type="string"/>
					<parameter name="meterid" type="string"/>
								</parameters>
				<set name="thisclass.m_appid" value="context.appid.toString()"/>
				<set name="thisclass.m_meterjson" value="context.strjson.toString()"/>
				<set name="thisclass.m_id" value="context.meterid.toString()"/>
				<set name="thisclass.m_state" value="'Added'"/>
				<set name="thisclass.m_packets" value="'0'"/>
				<set name="thisclass.m_bytes" value="'0'"/>
				<container name="bandlist" type="hashmap" keytype="string" valuetype="string"/>
				<variable name="bandtype" type="string"/>
				<variable name="bandjson" type="string"/>
				<variable name="bandobj" type="class"/>
				<script><![CDATA[
						var info = JSON.parse(context.strjson.toString());
						if (info.meterbandlist != null)
						{
							for(var i=0;i<info.meterbandlist.length;i++)
							{
								var oneband = info.meterbandlist[i];
								var strjson=JSON.stringify(oneband);
								context.bandlist.addValue(oneband.bandtype, strjson);
							}
						}
				]]></script>
				<for var="i" from="0" to="context.bandlist.size()-1">
					<function>
						<set name="bandjson" value="context.bandlist.getValueByIndex(context.i.toLong())"/>
						<set name="bandtype" value="context.bandlist.getKeyByIndex(context.i.toLong())"/>
						<new name="bandobj" class="CBand">
							<parameters>
								<parameter name="type" type="string" in="context.bandtype.toString()"/>
								<parameter name="bandjson" type="string" in="context.bandjson.toString()"/>
							</parameters>
						</new>
						<insert name="BandContainer" key="context.bandtype.toString()" value="context.bandobj"/>
					</function>
				</for>
			</function>
			<function name="GetMeterJson">
				<parameters>
					<parameter name="meterjson" type="string"/>
				</parameters>
				<set name="meterjson" value="thisclass.m_meterjson"/>
						</function>
			<function name="AddBand">
								<parameters>
					<parameter name="type" type="string"/>
					<parameter name="packets" type="string"/>
					<parameter name="bytes" type="string"/>
								</parameters>
				<variable name="oneband" type="class"/>
				<new name="oneband" class="CBand">
										<parameters>
						<parameter name="type" type="string" in="context.type.toString()"/>
						<parameter name="packets" type="string" in="context.packets.toString()"/>
						<parameter name="bytes" type="string" in="context.bytes.toString()"/>
										</parameters>
								</new>
				<remove name="BandContainer" key="context.type.toString()"/>
				<insert name="BandContainer" key="context.type.toString()" value="context.oneband"/>
						</function>
					<!--qiulei 2017.08.25 Friday pm-->
			<function name="getMeterInfo">
							<parameters>
					<variable name="id" type="string"/>
					<variable name="appid" type="string"/>
					<variable name="state" type="string"/>
					<variable name="packets" type="string"/>
					<variable name="bytes" type="string"/>
					<variable name="bands" type="string"/>
							</parameters>
				
				<set name="id" value="thisclass.m_id"/>
				<set name="appid" value="thisclass.m_appid"/>
				<set name="state" value="thisclass.m_state"/>
				<set name="packets" value="thisclass.m_packets"/>
				<set name="bytes" value="thisclass.m_bytes"/>
				<set name="bands" value="thisclass.m_bands"/>
			</function>
			<!--BandFormatter for websocket-->
			<function name="BandFormatter">
				<parameters>
					<parameter name="bandformatter" type="string"/>
				</parameters>
				<container name="strbandlist" type="list" valuetype="string"/>
				<variable name="bandobj" type="class"/>
				<variable name="bandstring" type="string"/>
				<if cond="context.BandContainer.size() == 0">
					<then>
						<set name="bandformatter" value="'(No bands for this meter)'"/>
						<exit/>
					</then>
					<else>
						<function>
							<for var="i" from="0" to="context.BandContainer.size()-1">
								<function>
									<set name="bandobj" value="context.BandContainer.getValueByIndex(context.i.toLong())"/>
									<function name="BandFormatter" class="bandobj">
										<parameters>
											<parameter name="bandformatter" type="string" out="context.bandstring"/>
													</parameters>
									</function>
									<insert name="strbandlist" value="context.bandstring.toString()"/>
								</function>
							</for>
						</function>
					</else>
				</if>
				<script><![CDATA[
					var totalstring="";
					for(var i=0;i<context.strbandlist.size();i++)
					{
						totalstring+=context.strbandlist.getValueByIndex(i);
						context.bandformatter.setValue(totalstring);
					}
				]]></script>
					</function>
					<!--qiulei 20170825 -->
			<function name="getOneMeterInfoJsonStr">
							<parameters>
					<parameter name="meterInfoJson" type="string"/>
				</parameters>
				<variable name="allbandstring" type="string"/>
				<function name="BandFormatter">
					<parameters>
						<parameter name="bandformatter" type="string" out="context.allbandstring"/>
								</parameters>
				</function>
				<script><![CDATA[
					var onearray = new Object();
							onearray.id=thisclass.m_id.toString();
							onearray.app_id=thisclass.m_appid.toString();
							onearray.state=thisclass.m_state.toString();
							onearray.packets=thisclass.m_packets.toString();
							onearray.bytes=thisclass.m_bytes.toString();
							onearray.bands=context.allbandstring.toString();
					
					var strjson = JSON.stringify(onearray);
					context.meterInfoJson.setValue(strjson);
				]]></script>
					</function>
		</public>
		</class>
	<class name="CMeterManager">
				<private>
			<container name="merterContainer" type="hashmap" keytype="string" valuetype="class"/>
			<variable name="m_transportid" type="string"/>
			<variable name="m_defaultmeterid" type="string"/>
				</private>
				<public>
			<function name="CMeterManager">
								<parameters>
					<parameter name="transportid" type="string"/>
								</parameters>
				<set name="thisclass.m_transportid" value="context.transportid.toString()"/>
				<set name="thisclass.m_defaultmeterid" value="'2'"/>
							<function name="testaddmeter"/>	
			</function>
			<function name="InstallMeterRequest">
									<parameters>
					<parameter name="strjson" type="string"/>
					<parameter name="meterid" type="string"/>
					<parameter name="appid" type="string"/>
									</parameters>
				<variable name="meterobj" type="class"/>
				<new name="meterobj" class="CMeter">
										<parameters>
						<parameter name="appid" type="string" in="context.appid.toString()"/>
						<parameter name="strjson" type="string" in="context.strjson.toString()"/>
						<parameter name="meterid" type="string" in="context.meterid.toString()"/>
										</parameters>
				</new>
				<if cond="thisclass.merterContainer.hasValue(context.meterid.toString())==false">
					<then>
						<function>
							<insert name="merterContainer" key="context.meterid.toString()" value="context.meterobj"/>
							<function name="Send_OFPT13_METER_MOD">
													<parameters>
									<parameter name="transportid" type="string" in="thisclass.m_transportid.toString()"/>
									<parameter name="strjson" type="string" in="context.strjson.toString()"/>
													</parameters>
							</function>
						</function>
					</then>
					<else>
						<log>metermanager container already have the meter</log>
					</else>
				</if>
						</function>
			<function name="UnInstallMeterRequest">
								<parameters>
					<parameter name="meterid" type="string"/>
								</parameters>
				<variable name="transportid" type="string"/>
				<variable name="meterobj" type="class"/>
				<variable name="flowmodjson" type="string"/>
				<variable name="sendflowmodjson" type="string"/>
				<if cond="context.merterContainer.hasValue(context.meterid.toString()) ==true">
										<then>
												<function>
							<lookup name="merterContainer" key="context.meterid.toString()" output="context.meterobj"/>
												</function>
										</then>
										<else>
												<function>
							<log>UnInstallMeterRequest exit</log>
														<exit/>
												</function>
										</else>
								</if>
				<function name="GetMeterJson" class="context.meterobj">
					<parameters>
						<parameter name="meterjson" type="string" out="context.flowmodjson"/>
					</parameters>
				</function>
				<script><![CDATA[
						var info = JSON.parse(context.flowmodjson.toString());
						info.command='3';
						var strjson=JSON.stringify(info);
						context.sendflowmodjson.setValue(strjson);
				]]></script>
				<function name="Send_OFPT13_METER_MOD">
										<parameters>
						<parameter name="transportid" type="string" in="thisclass.m_transportid.toString()"/>
						<parameter name="strjson" type="string" in="context.sendflowmodjson.toString()"/>
										</parameters>
								</function>
				<remove name="merterContainer" key="context.meterid.toString()"/>
							</function>
			<function name="testaddmeter">			
				<variable name="modstrjson" type="string"/>
				<variable name="resourceid" type="string" value=""/>
				<reference variable="modstrjson">
					<jsonbody><![CDATA[ 
						{
							"xid":"<%=context.openflowserverobj.getIncreaseXID()%>",
							"command":"<$=OPENFLOW_METER_MOD_ADD$>",
							"flag":"1",
							"meterid":"1",
							"meterbandlist":[
								{
									"bandtype":"1",
									"rate":"1000",
									"burstsize":"1000"
								},
								{
									"bandtype":"2",
									"preclevel":"1000"
								}
							]
						}	
					]]></jsonbody>
								</reference>
				<function name="InstallMeterRequest">
										<parameters>
						<parameter name="strjson" type="string" in="context.modstrjson.toString()"/>
						<parameter name="meterid" type="string" in="thisclass.m_defaultmeterid"/>
						<parameter name="appid" type="string" in="'core'"/>
										</parameters>
								</function>
						</function>
			<function name="testremovemeter">			
				<function name="UnInstallMeterRequest">
									<parameters>
						<parameter name="meterid" type="string" in="thisclass.m_defaultmeterid"/>
										</parameters>
								</function>
				
				
</function>
			<!--Meter json data qiulei 20170825-->
			<function name="GetAllMeterJsonData">	
								<parameters>
					<parameter name="jsonstring" type="string"/>
								</parameters>
				
				<container name="meterjsonlist" type="list" valuetype="string"/>
				<variable name="meterobj" type="class"/>
				<variable name="meterInfoJson" type="string"/>
				<for var="i" from="0" to="context.merterContainer.size()-1">
										<function>
						<set name="meterobj" value="context.merterContainer.getValueByIndex(context.i.toLong())"/>
						<function name="getOneMeterInfoJsonStr" class="context.meterobj">
														<parameters>
								<parameter name="meterInfoJson" type="string" out="context.meterInfoJson"/>
														</parameters>
												</function>
						<insert name="meterjsonlist" value="context.meterInfoJson.toString()"/>
										</function>
								</for>
				
				<script><![CDATA[
					var json = new Object();
					var payload = new Object();							
					json['event'] = "meterDataResponse";
					
					var MetersArray=new Array();
					for(var i=0;i<context.meterjsonlist.size();i++)
					{
						var oneMeterStrJson = context.meterjsonlist.getValueByIndex(i);
						var oneMeterObject = JSON.parse(oneMeterStrJson);
						MetersArray.push(oneMeterObject);
					}
					payload['meters'] = MetersArray;
					
					var twobject = new Object();								
					twobject['no_rows_msg'] = "No meters found";
													
					payload['annots'] = twobject;
					json['payload'] = payload;
					var strjson=JSON.stringify(json);				
					context.jsonstring.setValue(strjson);
					
				]]></script>
						</function>	
				</public>
		</class>
</starosxml>