<?xml version="1.0" encoding="UTF-8"?>
<starosxml xmlns="http://www.staros.xyz/starcore/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" scope="application">
	<variable name="testresourceid" type="string"/>
	<class name="CGroupBucket">
		<private>
			<variable name="m_packets" type="string"/>
			<variable name="m_bytes" type="string"/>
			<variable name="m_bucketjson" type="string"/>
		</private>
		<public>
			<function name="CGroupBucket">
				<parameters>
					<parameter name="bucketjson" type="string"/>
				</parameters>
				<set name="thisclass.m_bytes" value="'0'"/>
				<set name="thisclass.m_packets" value="'0'"/>
				<set name="thisclass.m_bucketjson" value="context.bucketjson.toString()"/>
			</function>
			<function name="UpdateState">
				<parameters>
					<parameter name="packets" type="string"/>
					<parameter name="bytes" type="string"/>
				</parameters>
				<set name="thisclass.m_packets" value="context.packets.toString()"/>
				<set name="thisclass.m_bytes" value="context.bytes.toString()"/>
			</function>
			<function name="ToJsonString">
				<parameters>
					<parameter name="jsonstring" type="string"/>
				</parameters>
				<script><![CDATA[
					var onebucket = JSON.parse(thisclass.m_bucketjson.toString());
					var jsonstrign='Bytes: '+thisclass.m_bytes.toString()+' Packets: '+thisclass.m_packets.toString()+' Actions: ';
					var straction="";
					if (onebucket.actions.length==0)
					{
						context.jsonstring.setValue("(No buckets for this group)");
					}
					else 
					{
						for (var j = 0; j < onebucket.actions.length; j++)
						{
							var oneaction = onebucket.actions[j];
							var key=global.actionsMap.getParam(oneaction.type).toString();
							var keyname=global.actionsNameMap.getParam(oneaction.type).toString();
							var actionvalue=oneaction[key];
							if (oneaction.type=='25')
							{
								if (global.matchfieldName.hasParam(actionvalue)==true)
								{
									var matchkeyname=global.matchfieldName.getParam(actionvalue).toString();
									var matchvalue_type = global.matchfieldMap.getParam(actionvalue).toString();
									var matchvalue = oneaction[matchvalue_type];
									if (oneaction.hasmask == "true")
									{
										var value_type_mask = matchvalue_type + "mask";
										if (oneaction[value_type_mask] != null)							
										{
											straction += keyname + ':' +matchvalue + '/' + oneaction[value_type_mask]+', ';
										}
									}
									else 
									{
										straction+=keyname+':' +matchvalue + ', ';
									}
								}
								straction+=keyname+':' +matchvalue + '/' + oneaction[value_type_mask]+', '
							}
							else 
							{
								straction+=keyname+':'+actionvalue+', ';
							}
						}
					}
					jsonstrign+=straction+"<br>";
					context.jsonstring.setValue(jsonstrign);				
				]]></script>
			</function>
			<function name="FetchStateFromJson">
				<parameters>
					<parameter name="groupjson" type="string"/>
				</parameters>
				<script><![CDATA[
					var info = JSON.parse(thisclass.groupjson.toString());
					thisclass.m_packets=info.packetcount;
					thisclass.m_bytes=info.bytecount;
				]]></script>
			</function>
		</public>
	</class>
	<class name="CGroup">
		<private>
			<variable name="m_id" type="string"/>
			<variable name="m_appid" type="string"/>
			<variable name="m_state" type="string"/>
			<variable name="m_type" type="string"/>
			<variable name="m_packets" type="string"/>
			<variable name="m_bytes" type="string"/>
			<variable name="m_strjson" type="string"/>
			<variable name="m_duration_sec" type="string"/>
			<variable name="m_duration_nsec" type="string"/>
			<variable name="m_ref_count" type="string"/>
			<container name="m_buckets" type="list" valuetype="class"/>
		</private>
		<public>
			<function name="CGroup">
				<parameters>
					<parameter name="id" type="string"/>
					<parameter name="appid" type="string"/>
					<parameter name="groupjson" type="string"/>
				</parameters>
				<set name="thisclass.m_id" value="context.id.toString()"/>
				<set name="thisclass.m_appid" value="context.appid.toString()"/>
				<set name="thisclass.m_strjson" value="context.groupjson.toString()"/>
				<set name="thisclass.m_state" value="'Added'"/>
				<set name="thisclass.m_packets" value="'0'"/>
				<set name="thisclass.m_bytes" value="'0'"/>
				<container name="strbucketlist" type="list" valuetype="string"/>
				<variable name="bucketobj" type="class"/>
				<variable name="strbucket" type="string"/>
				<variable name="strbucketlists" type="string"/>
				<script><![CDATA[
						var info = JSON.parse(thisclass.m_strjson.toString());
						thisclass.m_type=info.grouptype;
						if (info.bucketlist!=null)
						{
							for(var i=0;i<info.bucketlist.length;i++)
							{
								var onebucket = info.bucketlist[i];
								var strjson=JSON.stringify(onebucket);
								context.strbucketlist.addValue(strjson);
							}
						}
				]]></script>
				<for var="strbucketlists" in="context.strbucketlist">
					<function>
						<set name="strbucket" value="context.strbucketlists.toString()"/>
						 <new name="bucketobj" class="CGroupBucket">
							<parameters>
									<parameter name="bucketjson" type="string" in="context.strbucket.toString()"/>
							</parameters>
						</new>
						<insert name="m_buckets" value="context.bucketobj"/>
					</function>
				</for>
			</function>
			<function name="GroupToJsonString">
				<parameters>
					<parameter name="groupjson" type="string"/>
				</parameters>
				<variable name="outjson" type="string"/>
				<variable name="bucketsobj" type="class"/>
				<container name="bucketjsonlist" type="list" valuetype="string"/>
				<variable name="i" type="class"/>
			
				<for var="i" in="context.m_buckets">
					<function>
						<set name="bucketsobj" value="context.i"/>
						<if cond="context.bucketsobj==null">
							<then>
								<log>bucketsobj is null</log>
								<exit/>
							</then>
						</if>
						<function name="ToJsonString" class="bucketsobj">
							<parameters>
								<parameter name="jsonstring" type="string" out="context.outjson"/>
							</parameters>
						</function>
						<insert name="bucketjsonlist" value="context.outjson.toString()"/>
					</function>
				</for>
				<script><![CDATA[
					var flow = new Object();
					flow.id = thisclass.m_id.toString();
					flow.app_id = thisclass.m_appid.toString();
					flow.state = thisclass.m_state.toString();
					flow.packets = thisclass.m_packets.toString();
					flow.bytes = thisclass.m_bytes.toString();
					flow.type = thisclass.m_type.toString();
					var buckets=" ";
					var firstring = context.bucketjsonlist.getFirst();
					while(firstring != null)
					{
						buckets+=firstring;
						firstring=context.bucketjsonlist.getNext();
					}
					flow.buckets=buckets;
					var strjson=JSON.stringify(flow);
					context.groupjson.setValue(strjson);					
				]]></script>				

			</function>
			<!--Get Stat info from MGroup Reply json-->
			<function name="FetchStateFromJson">
				<parameters>
					<parameter name="groupjson" type="string"/>
				</parameters>
				<container name="bucketjsonlist" type="array" valuetype="string"/>
				<variable name="bucketsobj" type="class"/>
				<variable name="bucketstring" type="class"/>
				<variable name="i" type="long" value="0"/>
				<script><![CDATA[
					var info = JSON.parse(thisclass.groupjson.toString());
					thisclass.m_ref_count=info.refcount;
					thisclass.m_packets=info.packetcount;
					thisclass.m_bytes=info.bytecount;
					thisclass.m_duration_sec=info.duretionsec;
					thisclass.m_duration_nsec=info.durationnsec;
					for(var i=0;i<info.bucketcounterlist.length;i++)
					{
						var onebucket = info.bucketcounterlist[i];
						context.bucketjsonlist.addValue(JSON.stringify(onebucket));
					}
				]]></script>
				
				<!--hu-->
				
				<for var="bucketsobj" in="context.m_buckets">
					<function>
						<set name="bucketstring" value="context.bucketjsonlist.getValue(context.i.toLong())"/>
						<if cond="context.bucketsobj==null">
							<then>
								<log>bucketsobj is null</log>
								<exit/>
							</then>
						</if>
						<function name="FetchStateFromJson" class="bucketsobj">
							<parameters>
								<parameter name="jsonstring" type="string" in="context.bucketstring.toString()"/>
							</parameters>
						</function>
						<set name="i" value="context.i.toLong()+1"/>
					</function>
				</for>
			</function>
			
			<!-- wangkang 2017/09/06 -->
			<function name="SetState">
				<parameters>
					<parameter name="inmodstate" type="string"/>
				</parameters>
				<set name="m_state" value="context.inmodstate.toString()"/>
			</function>
			
		</public>
	</class>
	<class name="CGroupManager">
		<private>
			<container name="groupContainer" type="hashmap" keytype="string" valuetype="class"/>
			<variable name="m_transportid" type="string"/>
			<variable name="m_testgroupid" type="string"/>
			<variable name="m_errorid" type="string"/>
			<variable name="m_groupid" type="long"/>
		</private>
		<public>
			<function name="CGroupManager">
				<parameters>
					<parameter name="transportid" type="string"/>
				</parameters>
				<set name="thisclass.m_transportid" value="context.transportid.toString()"/>
				<!--set name="thisclass.m_testgroupid" value="'2'"/-->
				<set name="thisclass.m_groupid" value="0"/>
				<function name="testaddgroup"/>
				<function name="InstallErrorGroup"/>
			</function>
			<function name="InstallGroupRequest">
				<parameters>
					<parameter name="in_strjson" type="string"/>
					<parameter name="in_appid" type="string" />
					<parameter name="in_groupid" type="string" />
				</parameters>
				<variable name="tmpgroupid" type="long"/>
				<set name="tmpgroupid" value="thisclass.m_groupid.toLong()"/>
				<set name="in_groupid" value="context.tmpgroupid.toString()"/>
				<variable name="groupobj" type="class"/>
				<variable name="outjson" type="string"/>
				
				<script><![CDATA[
						var info = JSON.parse(context.in_strjson.toString());
						info.groupid=context.tmpgroupid.toString();
						var str_json=JSON.stringify(info);
						context.outjson.setValue(str_json);

				]]></script>
				<!--qiulei modify 20170807-->
				<function name="Send_OFPT13_GROUP_MOD">
					<parameters>
						<parameter name="transportid" type="string" in="thisclass.m_transportid.toString()"/>
						<parameter name="strjson" type="string" in="context.outjson.toString()"/>
					</parameters>
				</function>
				<new name="groupobj" class="CGroup">
					<parameters>
						<parameter name="id" type="string" in="context.in_groupid.toString()"/>
						<parameter name="appid" type="string" in="context.in_appid.toString()"/>
						<parameter name="groupjson" type="string" in="context.outjson.toString()"/>
					</parameters>
				</new>
				<insert name="groupContainer" key="context.in_groupid.toString()" value="context.groupobj"/>
				<set name="thisclass.m_groupid" value="thisclass.m_groupid.toLong()+1"/>
			</function>
			<function name="UnInstallGroupRequest">
				<parameters>
					<parameter name="groupid" type="string"/>
				</parameters>
				<variable name="jsongroup" type="class"/>
				<variable name="sendflowmodjson" type="string"/>
				<variable name="groupstring" type="string"/>
				<if cond="context.groupContainer.hasValue(context.groupid.toString()) ==true">
					<then>
						<function>
							<lookup name="groupContainer" key="context.groupid.toString()" output="context.jsongroup"/>
						</function>
					</then>
					<else>
						<function>
							<log>UnInstallGroupRequest exit</log>
							<exit/>
						</function>
					</else>
				</if>
				<function name="GetGroupString" class="context.jsongroup">
					<parameters>
						<parameter name="outgroupstring" type="string" out="context.groupstring"/>
					</parameters>
				</function>
				<script><![CDATA[
						var info = JSON.parse(context.groupstring.toString());
						info.command='2';
						var strjson=JSON.stringify(info);
						context.sendflowmodjson.setValue(strjson);
				]]></script>
				<function name="Send_OFPT13_GROUP_MOD">
					<parameters>
						<parameter name="transportid" type="string" in="thisclass.m_transportid.toString()"/>
						<parameter name="strjson" type="string" in="context.sendflowmodjson.toString()"/>
					</parameters>
				</function>
				<remove name="groupContainer" key="context.groupid.toString()"/>
			</function>
			<!--
				OFPGT_ALL = 0, /* All (multicast/broadcast) group. */
				OFPGT_SELECT = 1, /* Select group. */
				OFPGT_INDIRECT = 2, /* Indirect group. */
				OFPGT_FF = 3, /* Fast failover group. */
			-->
			<function name="testaddgroup">
				<variable name="modstrjson" type="string"/>
				<variable name="returnresourceid" type="string"/>
				<reference variable="modstrjson">
					<jsonbody><![CDATA[ 
						{
							"xid":"<%=context.openflowserverobj.getIncreaseXID()%>",
							"command":"0",
							"grouptype":"1",
							"groupid":"0",
							"bucketlist":[
								{
									"weight":"1",
									"watchport":"1000",
									"watchgroup":"1000",
									"actions":[
										{
											"type":"0",
											"outport":"0xfffffffd",
											"maxlen":"0xffff"
										}
									]
								}
							]
						}	
					]]></jsonbody>
				</reference>
				<function name="InstallGroupRequest">
					<parameters>
						<parameter name="in_strjson" type="string" in="context.modstrjson.toString()"/>
						<parameter name="in_groupid" type="string" out="thisclass.m_testgroupid"/>
						<parameter name="in_appid" type="string" in="'core'"/>
					</parameters>
				</function>
			</function>
			
			<!-- wangkang 2017/09/06 -->
			<function name="InstallErrorGroup">
				<variable name="modstrjson" type="string"/>
				<variable name="returnresourceid" type="string"/>
				<reference variable="modstrjson">
					<jsonbody><![CDATA[ 
						{
							"xid":"<%=context.openflowserverobj.getIncreaseXID()%>",
							"command":"65",
							"grouptype":"1",
							"groupid":"0",
							"bucketlist":[
								{
									"weight":"1",
									"watchport":"1000",
									"watchgroup":"1000",
									"actions":[
										{
											"type":"0",
											"outport":"0xfffffffd",
											"maxlen":"0xffff"
										}
									]
								}
							]
						}	
					]]></jsonbody>
				</reference>
				<function name="InstallGroupRequest">
					<parameters>
						<parameter name="in_strjson" type="string" in="context.modstrjson.toString()"/>
						<parameter name="in_groupid" type="string" out="thisclass.m_errorid"/>
						<parameter name="in_appid" type="string" in="'core'"/>
					</parameters>
				</function>
			</function>
			
			<function name="testremovegroup">			
				<function name="UnInstallGroupRequest">
					<parameters>
						<parameter name="groupid" type="string" in="thisclass.m_testgroupid.toString()"/>
					</parameters>
				</function>				
			</function>
			<!-- for Get Group Json Data-->
			<function name="GetGroupJsonData">	
				<parameters>
					<parameter name="jsonstring" type="string"/>
				</parameters>
				<container name="groupjsonlist" type="list" valuetype="string"/>
				<variable name="groupobj" type="class"/>
				<variable name="GroupInfoJson" type="string"/>
				<container name="onegrouppair" type="pair" keytype="string" valuetype="class"/>
					<for var="onegrouppair" in="context.groupContainer">
					<function>
						<set name="groupobj" value="context.onegrouppair.second()"/>
						<function name="GroupToJsonString" class="groupobj">
							<parameters>
								<parameter name="groupjson" type="string" out="context.GroupInfoJson"/>
							</parameters>
						</function>
						<insert name="groupjsonlist" value="context.GroupInfoJson.toString()"/>
					</function>
				</for>
				
				<script><![CDATA[
					var json = new Object();
					var payload = new Object();							
					json['event'] = "groupDataResponse";
					
					var gArray=new Array();
					var firststr=context.groupjsonlist.getFirst();
					while(firststr!=null){
						var oneStrJson=firststr;
						var oneObject = JSON.parse(oneStrJson);
						gArray.push(oneObject);
						firststr=context.groupjsonlist.getNext();
					}

					payload['groups'] = gArray;
					
					var twobject = new Object();								
					twobject['no_rows_msg'] = "No groups found";
													
					payload['annots'] = twobject;
					json['payload'] = payload;
					var strjson=JSON.stringify(json);				
					context.jsonstring.setValue(strjson);
					
				]]></script>
			</function>	
			<function name="HandleGroupStateResponse">
				<parameters>
					<parameter name="groupjson" type="string"/>
				</parameters>
				<variable name="groupid" type="string"/>
				<variable name="groupobj" type="class"/>
				<variable name="groupstate" type="string"/>
				<container name="onegrouppair" type="pair" keytype="string" valuetype="class"/>
				<container name="liststate" type="hashmap" keytype="string" valuetype="string"/>
																<script><![CDATA[							
					var info = JSON.parse(context.groupjson.toString());
									if (info.statslist != null)
									{
										for(var i=0;i<info.statslist.length;i++)
										{
											var onestat=info.statslist[i];
											context.liststate.addValue(onestate.groupid, JSON.stringify(onestat));
										}
									}
								]]></script>							
				<for var="onegrouppair" in="context.groupContainer">
					<function>
						<set name="groupobj" value="context.onegrouppair.second()"/>
						<set name="groupid" value="context.onegrouppair.first()"/>
						
						<if cond="context.liststate.hasValue(context.groupid.toString())==true">
							<then>
								<set name="groupstate" value="context.liststate.getValue(context.groupid.toString())"/>
								<function name="FetchStateFromJson" class="groupobj">
									<parameters>
										<parameter name="groupjson" type="string" in="context.groupstate.toString"/>
									</parameters>
								</function>
							</then>
						</if>
					</function>
				</for>
			</function>	
			
<!--Group State Request-->
			<function name="GroupStateRequest">
				<variable name="xid" type="string"/>
				<set name="xid" value="context.openflowserverobj.getIncreaseXID()"/>
				<function name="OpenFlowMultiPartGroupRequest">
					<parameters>
						<parameter name="xid" type="long" in="context.xid.toLong()"/>
						<parameter name="transportid" type="string" in="thisclass.m_transportid.toString()"/>
					</parameters>
				</function>
			</function>	
			
			<!-- wangkang 2017/09/06-->
			<function name="FindGroup">
				<parameters>
					<parameter name="ingroupid" type="string"/>
					<parameter name="outgroup" type="class"/>
				</parameters>
				<function name="DumpGroup"/>
				<if cond="context.groupContainer.hasValue(context.ingroupid.toString()) == true">
					<then>
						<function>
							<lookup name="groupContainer" key="context.ingroupid.toString()" output="context.outgroup"/>
						</function>
					</then>
				</if>
			</function>
			<function name="DumpGroup">
				<variable name="groupkey" type="string"/>
				<container name="onestatepair" type="pair" keytype="string" valuetype="class"/> 
				<for var="onestatepair" in="context.groupContainer">
					<set name="groupkey" value="context.onestatepair.first()"/>
					<log><![CDATA[groupkey=<%=context.groupkey.toString()%>]]></log>
				</for>
			</function>
		
		</public>
	</class>
</starosxml>